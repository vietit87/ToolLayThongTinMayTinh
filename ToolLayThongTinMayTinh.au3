#RequireAdmin

#Region ;**** Directives created by AutoIt3Wrapper_GUI ****
#AutoIt3Wrapper_Icon=o.ico
#AutoIt3Wrapper_Res_Description=ToolLayThongTinMayTinh_v2.0 ; t√™n hi·ªÉn th·ªã trong Task Manager
#AutoIt3Wrapper_Outfile=ToolLayThongTinMayTinh_v2.0.exe ; t√™n file ƒë·∫ßu ra (.exe) cho ·ª©ng d·ª•ng
#AutoIt3Wrapper_Res_Fileversion=2.0.0.0
#AutoIt3Wrapper_Res_Companyname=Copyright@lqviet_10.08.2025
#AutoIt3Wrapper_Res_Language=1066 ; Vietnamese
#AutoIt3Wrapper_Run_Obfuscator=y  ; S·ª≠ d·ª•ng b·ªô l√†m r·ªëi m√£ ngu·ªìn
#AutoIt3Wrapper_UseUpx=y   ;s·ª≠ d·ª•ng c√¥ng c·ª• UPX ƒë·ªÉ n√©n file .exe
#EndRegion ;**** Directives created by AutoIt3Wrapper_GUI ****

; ================================== Khai b√°o th∆∞ vi·ªán v√† ch·∫ø ƒë·ªô x·ª≠ l√Ω s·ª± ki·ªán ==================================
#include <GUIConstantsEx.au3>
#include <StaticConstants.au3>
#include <WindowsConstants.au3>
#include <EditConstants.au3>
#include <MsgBoxConstants.au3>
#include <StringConstants.au3>
#include <Constants.au3>
#include <File.au3>
#include <Array.au3>
#include <WinAPIReg.au3>

Opt("GUIOnEventMode", 1) ; Ch·∫ø ƒë·ªô x·ª≠ l√Ω s·ª± ki·ªán d·ª±a tr√™n h√†m

; ================================== Khai b√°o bi·∫øn to√†n c·ª•c ==================================
Global $txt_pcName, $txt_manu, $txt_model, $txt_os
Global $txt_office, $txt_security
Global $txt_mainboard, $txt_year, $txt_cpu, $txt_gpu
Global $txt_ram1, $txt_ram2, $txt_disk1, $txt_disk2
Global $btn_check_win_license, $btn_check_office_license
Global $btn_export, $btn_exit
Global $hGUI
Global $txt_total_ram, $txt_total_disk

; ================================== T·∫°o giao di·ªán ng∆∞·ªùi d√πng (GUI) ==================================
Func CreateGUI()
	$hGUI = GUICreate("Xem Th√¥ng tin h·ªá th·ªëng - v2.0", 700, 530) ; TƒÉng chi·ªÅu cao GUI l√™n 530
	GUISetFont(10)

	Local $lblAuthor = GUICtrlCreateLabel("üìå Ph√°t tri·ªÉn b·ªüi: L√™ Qu·ªëc Vi·ªát", 20, 10, 300, 20)
	GUICtrlSetColor($lblAuthor, 0xFF0000) ; ƒê·ªè
	GUICtrlSetFont($lblAuthor, 10, 400, 2, "Arial") ; C·ª° 10, th∆∞·ªùng 400 (ƒë·∫≠m 800), nghi√™ng 2

	; ================================== V√πng "Th√¥ng tin chung" ==================================
	GUICtrlCreateGroup("üí° Th√¥ng tin chung", 20, 40, 310, 230) ; TƒÉng chi·ªÅu r·ªông nh√≥m
	GUICtrlCreateLabel("üíª T√™n m√°y:", 30, 60, 110, 20)
	$txt_pcName = GUICtrlCreateInput("", 140, 60, 180, 20, $ES_READONLY + $ES_AUTOHSCROLL + $ES_LEFT)

	GUICtrlCreateLabel("üïã H√£ng s·∫£n xu·∫•t:", 30, 85, 110, 20)
	$txt_manu = GUICtrlCreateInput("", 140, 85, 180, 20, $ES_READONLY + $ES_AUTOHSCROLL + $ES_LEFT)

	GUICtrlCreateLabel("üì∞ Model:", 30, 110, 110, 20)
	$txt_model = GUICtrlCreateInput("", 140, 110, 180, 20, $ES_READONLY + $ES_AUTOHSCROLL + $ES_LEFT)

	GUICtrlCreateLabel("ü™ü H·ªá ƒëi·ªÅu h√†nh:", 30, 135, 110, 20)
	$txt_os = GUICtrlCreateInput("", 140, 135, 180, 20, $ES_READONLY + $ES_AUTOHSCROLL + $ES_LEFT)

	GUICtrlCreateLabel("‚úÖ B·∫£n quy·ªÅn Win:", 30, 160, 110, 20)
	$btn_check_win_license = GUICtrlCreateButton("Ki·ªÉm tra", 140, 160, 80, 20)
	$btn_oem_key = GUICtrlCreateButton("OEM Key", 230, 160, 90, 20)
	GUICtrlSetTip($btn_oem_key, "Ch·ªâ hi·ªán Key khi c√≥ b·∫£n quy·ªÅn OEM k√®m theo m√°y t√≠nh")

	GUICtrlCreateLabel("üì¶ Office:", 30, 185, 110, 20)
	$txt_office = GUICtrlCreateInput("", 140, 185, 180, 20, $ES_LEFT + $ES_AUTOHSCROLL + $ES_READONLY)
	GUICtrlSetTip($txt_office, "16.0: Office 2016, 2019, 2021 & 365" & @CRLF & "15.0: Office 2013" & @CRLF & "14.0: Office 2010" & @CRLF & "12.0: Office 2007")

	GUICtrlCreateLabel("‚úÖ BQuy·ªÅn Office:", 30, 210, 130, 20)
	$btn_check_office_license = GUICtrlCreateButton("Ki·ªÉm tra", 140, 210, 180, 20)

	GUICtrlCreateLabel("üîí Security:", 30, 235, 110, 20)
	$txt_security = GUICtrlCreateInput("", 140, 235, 180, 20, $ES_READONLY + $ES_AUTOHSCROLL + $ES_LEFT)
	GUICtrlCreateGroup("", -99, -99, 1, 1)

	; ================================== V√πng "Th√¥ng tin ph·∫ßn c·ª©ng" ==================================
	GUICtrlCreateGroup("üì£ Th√¥ng tin ph·∫ßn c·ª©ng", 350, 40, 330, 155)
	GUICtrlCreateLabel("üóÇ Mainboard:", 360, 60, 100, 20)
	$txt_mainboard = GUICtrlCreateInput("", 460, 60, 210, 20, $ES_READONLY + $ES_AUTOHSCROLL + $ES_LEFT)

	GUICtrlCreateLabel("‚ôæÔ∏è NƒÉm s·∫£n xu·∫•t:", 360, 85, 130, 20)
	$txt_year = GUICtrlCreateInput("", 460, 85, 210, 20, $ES_READONLY + $ES_AUTOHSCROLL + $ES_LEFT)
	GUICtrlSetTip($txt_year, "NƒÉm s·∫£n xu·∫•t ƒë∆∞·ª£c t√≠nh theo Mainboard")
	GUICtrlCreateLabel("üéü CPU:", 360, 110, 60, 20)
	$txt_cpu = GUICtrlCreateInput("", 420, 110, 250, 20, $ES_READONLY + $ES_AUTOHSCROLL + $ES_LEFT)

	GUICtrlCreateLabel("üéû Card ƒë·ªì ho·∫°:", 360, 135, 100, 20)
	$txt_gpu = GUICtrlCreateInput("", 460, 135, 210, 20, $ES_READONLY + $ES_AUTOHSCROLL + $ES_LEFT)
	GUICtrlCreateGroup("", -99, -99, 1, 1)

	; ================================== V√πng "RAM" ==================================
	GUICtrlCreateGroup("üí≥ RAM", 20, 280, 660, 105) ; TƒÉng chi·ªÅu cao nh√≥m RAM
	GUICtrlCreateLabel("üéû Khe 1:", 30, 300, 70, 20)
	$txt_ram1 = GUICtrlCreateInput("", 100, 300, 560, 20, $ES_READONLY + $ES_AUTOHSCROLL + $ES_LEFT)
	GUICtrlCreateLabel("üéû Khe 2:", 30, 325, 70, 20)
	$txt_ram2 = GUICtrlCreateInput("", 100, 325, 560, 20, $ES_READONLY + $ES_AUTOHSCROLL + $ES_LEFT)
	GUICtrlCreateLabel("T·ªïng c·ªông:", 30, 350, 70, 20) ; Th√™m d√≤ng "T·ªïng c·ªông"
	$txt_total_ram = GUICtrlCreateInput("", 100, 350, 560, 20, $ES_READONLY + $ES_AUTOHSCROLL + $ES_LEFT) ; Th√™m √¥ input t·ªïng RAM
	GUICtrlCreateGroup("", -99, -99, 1, 1)

	; ================================== V√πng "·ªî c·ª©ng" ==================================
	GUICtrlCreateGroup("üõ¢ ·ªî c·ª©ng", 20, 390, 660, 105) ; ƒêi·ªÅu ch·ªânh v·ªã tr√≠ v√† tƒÉng chi·ªÅu cao
	GUICtrlCreateLabel("üóÑ ·ªî ƒëƒ©a 1:", 30, 410, 70, 20)
	$txt_disk1 = GUICtrlCreateInput("", 100, 410, 560, 20, $ES_READONLY + $ES_AUTOHSCROLL + $ES_LEFT)
	GUICtrlSetTip($txt_disk1, "Tr√™n Win 7, ch·ªâ c√≥ th·ªÉ x√°c ƒë·ªãnh l√† HDD, x√°c ƒë·ªãnh l√† SSD ch·ªâ h·ªó tr·ª£ t·ª´ Win 8 tr·ªü l√™n")
	GUICtrlCreateLabel("üóÑ ·ªî ƒëƒ©a 2:", 30, 435, 70, 20)
	$txt_disk2 = GUICtrlCreateInput("", 100, 435, 560, 20, $ES_READONLY + $ES_AUTOHSCROLL + $ES_LEFT)
	GUICtrlCreateLabel("T·ªïng c·ªông:", 30, 460, 70, 20) ; Th√™m d√≤ng "T·ªïng c·ªông"
	$txt_total_disk = GUICtrlCreateInput("", 100, 460, 560, 20, $ES_READONLY + $ES_AUTOHSCROLL + $ES_LEFT) ; Th√™m √¥ input t·ªïng ·ªï c·ª©ng
	GUICtrlCreateGroup("", -99, -99, 1, 1)

	; ================================== C√°c n√∫t ch·ª©c nƒÉng (cƒÉn gi·ªØa) ==================================
	Local $iBtnWidth = 150
	Local $iBtnSpacing = 20
	Local $iTotalWidth = (2 * $iBtnWidth) + $iBtnSpacing
	Local $iStartPos = (700 - $iTotalWidth) / 2

	$btn_export = GUICtrlCreateButton("üìù Xu·∫•t k·∫øt qu·∫£", $iStartPos, 495, $iBtnWidth, 30) ; ƒêi·ªÅu ch·ªânh v·ªã tr√≠ n√∫t
	$btn_exit = GUICtrlCreateButton("‚ùå Tho√°t", $iStartPos + $iBtnWidth + $iBtnSpacing, 495, $iBtnWidth, 30) ; ƒêi·ªÅu ch·ªânh v·ªã tr√≠ n√∫t

	GUICtrlSetOnEvent($btn_check_win_license, "CheckWinLicense")
	GUICtrlSetOnEvent($btn_oem_key, "CheckOemKey")
	GUICtrlSetOnEvent($btn_check_office_license, "CheckOfficeLicense")
	GUICtrlSetOnEvent($btn_export, "HandleExport")
	GUICtrlSetOnEvent($btn_exit, "HandleExit")
	GUISetOnEvent($GUI_EVENT_CLOSE, "HandleExit")

	GUISetState(@SW_SHOW)
EndFunc

; ================================== H√†m ch√≠nh ƒë·ªÉ l·∫•y v√† hi·ªÉn th·ªã th√¥ng tin ==================================
Func GetAndDisplayInfo()
    Local $oWMI = ObjGet("winmgmts:\\.\root\cimv2")

    ; Th√¥ng tin chung
    GUICtrlSetData($txt_pcName, @ComputerName)
    Local $colCS = $oWMI.ExecQuery("SELECT * FROM Win32_ComputerSystem")
    If Not @error And $colCS.Count > 0 Then
        Local $oCS = $colCS.ItemIndex(0)
        GUICtrlSetData($txt_manu, $oCS.Manufacturer)
        GUICtrlSetData($txt_model, $oCS.Model)
    EndIf

    ; Th√¥ng tin h·ªá ƒëi·ªÅu h√†nh
    Local $colOS = $oWMI.ExecQuery("SELECT * FROM Win32_OperatingSystem")
    If Not @error And $colOS.Count > 0 Then
        Local $oOS = $colOS.ItemIndex(0)
        GUICtrlSetData($txt_os, $oOS.Caption & " (" & @OSArch & ")")
		GUICtrlSetData($txt_os, GUICtrlRead($txt_os))
    EndIf

    ; Th√¥ng tin Mainboard
    Local $colMB = $oWMI.ExecQuery("SELECT * FROM Win32_BaseBoard")
    If Not @error And $colMB.Count > 0 Then
        Local $oMB = $colMB.ItemIndex(0)
        GUICtrlSetData($txt_mainboard, $oMB.Product & " (" & $oMB.Manufacturer & ")")
    EndIf

    ; Th√¥ng tin nƒÉm s·∫£n xu·∫•t
    Local $colBIOS = $oWMI.ExecQuery("SELECT * FROM Win32_BIOS")
    If Not @error And $colBIOS.Count > 0 Then
        Local $oBIOS = $colBIOS.ItemIndex(0)
        Local $sBiosDate = $oBIOS.ReleaseDate
        If StringLen($sBiosDate) >= 4 Then
            GUICtrlSetData($txt_year, StringMid($sBiosDate, 1, 4))
        Else
            GUICtrlSetData($txt_year, "Ch∆∞a l·∫•y ƒë∆∞·ª£c th√¥ng tin")
        EndIf
    EndIf

    ; L·∫•y th√¥ng tin Office
    GUICtrlSetData($txt_office, GetOfficeInfo())

    ; Ph·∫ßn m·ªÅm di·ªát virus
    GUICtrlSetData($txt_security, GetSecuritySoftwareInfo())

    ; Th√¥ng tin CPU
    Local $colCPU = $oWMI.ExecQuery("SELECT * FROM Win32_Processor")
    If Not @error And $colCPU.Count > 0 Then
        Local $oCPU = $colCPU.ItemIndex(0)
        GUICtrlSetData($txt_cpu, $oCPU.Name)
    EndIf

    ; Th√¥ng tin GPU
    Local $colGPU = $oWMI.ExecQuery("SELECT * FROM Win32_VideoController")
    If Not @error And $colGPU.Count > 0 Then
        Local $oGPU = $colGPU.ItemIndex(0)
        GUICtrlSetData($txt_gpu, $oGPU.Name)
    EndIf

    ; Th√¥ng tin RAM (c√≥ th√™m t√™n h√£ng)
    Local $colMem = $oWMI.ExecQuery("SELECT * FROM Win32_PhysicalMemory")
    If Not @error And IsObj($colMem) Then
        Local $iTotalRAM_GB = 0
        For $i = 0 To $colMem.Count - 1
            Local $oMem = $colMem.ItemIndex($i)

            ; L·∫•y dung l∆∞·ª£ng v√† chuy·ªÉn ƒë·ªïi sang GB
            Local $sizeGB = Round($oMem.Capacity / (1024 * 1024 * 1024), 0)
            $iTotalRAM_GB += $sizeGB ; C·ªông d·ªìn v√†o t·ªïng

            Local $sManufacturer = $oMem.Manufacturer
            If StringLen($sManufacturer) = 0 Then
                $sManufacturer = "Unknown"
            EndIf

            Local $sRamInfo = $sizeGB & "GB - " & $sManufacturer & " - Bus " & $oMem.Speed & " MHz"
            If $i = 0 Then
                GUICtrlSetData($txt_ram1, $sRamInfo)
            ElseIf $i = 1 Then
                GUICtrlSetData($txt_ram2, $sRamInfo)
            EndIf
        Next
        ; Hi·ªÉn th·ªã t·ªïng dung l∆∞·ª£ng RAM sau khi v√≤ng l·∫∑p k·∫øt th√∫c
		GUICtrlSetData($txt_total_ram, $iTotalRAM_GB & " GB")
	EndIf

    ; Th√¥ng tin ·ªï c·ª©ng
	Local $colDisk = $oWMI.ExecQuery("SELECT * FROM Win32_DiskDrive")
	If Not @error And IsObj($colDisk) Then
		Local $iTotalDisk_GB = 0 ; Bi·∫øn t·ªïng dung l∆∞·ª£ng theo gi√° tr·ªã th√¥ng th∆∞·ªùng

		For $i = 0 To $colDisk.Count - 1
			Local $oDisk = $colDisk.ItemIndex($i)

			; L·∫•y dung l∆∞·ª£ng th·ª±c t·∫ø v√† l√†m tr√≤n sang GB
			Local $sizeActualGB = Round($oDisk.Size / (1024 * 1024 * 1024), 0)

			Local $sDiskSizeDisplay = ""
			Local $iDiskSizeConventional = 0

			; Xac dinh dung luong chuan thuc te va dung luong de hien thi
			If $sizeActualGB > 1600 Then
				$iDiskSizeConventional = 2048
				$sDiskSizeDisplay = $iDiskSizeConventional & " GB (2TB)"
			ElseIf $sizeActualGB > 900 Then
				$iDiskSizeConventional = 1024
				$sDiskSizeDisplay = $iDiskSizeConventional & " GB (1TB)"
			ElseIf $sizeActualGB > 400 Then
				$iDiskSizeConventional = 512
				$sDiskSizeDisplay = $iDiskSizeConventional & " GB"
			ElseIf $sizeActualGB > 220 Then
				$iDiskSizeConventional = 256
				$sDiskSizeDisplay = $iDiskSizeConventional & " GB"
			ElseIf $sizeActualGB > 110 Then
				$iDiskSizeConventional = 128
				$sDiskSizeDisplay = $iDiskSizeConventional & " GB"
			Else
				$iDiskSizeConventional = $sizeActualGB
				$sDiskSizeDisplay = $iDiskSizeConventional & " GB"
			EndIf

			; C·ªông d·ªìn dung l∆∞·ª£ng th√¥ng th∆∞·ªùng v√†o t·ªïng
			$iTotalDisk_GB += $iDiskSizeConventional

			; X√°c ƒë·ªãnh lo·∫°i ·ªï ƒëƒ©a
			Local $sDiskType = "Unknown"
			If $oDisk.InterfaceType = "USB" Then
				$sDiskType = "USB"
			Else
				If @OSVersion = "WIN_7" Then
					If $oDisk.MediaType = "Fixed hard disk media" Then
						$sDiskType = "HDD"
					EndIf
				Else
					Local $oStorageWMI = ObjGet("winmgmts:\\.\root\microsoft\windows\storage")
					If IsObj($oStorageWMI) Then
						Local $colParts = $oStorageWMI.ExecQuery("SELECT * FROM MSFT_PhysicalDisk WHERE FriendlyName LIKE '%" & StringStripWS($oDisk.Model, 3) & "%'")
						If Not @error And IsObj($colParts) And $colParts.Count > 0 Then
							Local $oPart = $colParts.ItemIndex(0)
							If $oPart.MediaType = 4 Then
								$sDiskType = "SSD"
							ElseIf $oPart.MediaType = 3 Then
								$sDiskType = "HDD"
							EndIf
						EndIf
					EndIf
				EndIf
			EndIf

			; T·∫°o chu·ªói th√¥ng tin cu·ªëi c√πng
			Local $sDiskInfo = $sDiskType & " - " & $sDiskSizeDisplay & " - " & $oDisk.Model & "-" & $sizeActualGB & "GB"

			If $i = 0 Then
				GUICtrlSetData($txt_disk1, $sDiskInfo)
			ElseIf $i = 1 Then
				GUICtrlSetData($txt_disk2, $sDiskInfo)
			EndIf
		Next

		; Hi·ªÉn th·ªã t·ªïng dung l∆∞·ª£ng ·ªï c·ª©ng sau khi v√≤ng l·∫∑p k·∫øt th√∫c
		Local $sTotalDisplay = $iTotalDisk_GB & " GB"
		If $iTotalDisk_GB >= 1024 Then
			Local $dTotalTB = Round($iTotalDisk_GB / 1024, 0)
			$sTotalDisplay &= " (" & $dTotalTB & "TB)"
		EndIf
		GUICtrlSetData($txt_total_disk, $sTotalDisplay)
	EndIf

	;======================================================================
	; T·∫°o m·ªôt m·∫£ng ch·ª©a ID c·ªßa t·∫•t c·∫£ c√°c √¥ input c·∫ßn x·ª≠ l√Ω
    Local $aInputControls = [ _
        $txt_pcName, $txt_manu, $txt_model, $txt_os, $txt_office, $txt_security, _
        $txt_mainboard, $txt_year, $txt_cpu, $txt_gpu, $txt_ram1, $txt_ram2, _
        $txt_disk1, $txt_disk2 _
    ]

    For $i = 0 To UBound($aInputControls) - 1
        ; Ki·ªÉm tra xem ƒëi·ªÅu khi·ªÉn c√≥ t·ªìn t·∫°i kh√¥ng
        If IsHWnd(GUICtrlGetHandle($aInputControls[$i])) Then
            ; T·∫≠p trung v√†o √¥ input ƒë√≥
            ControlFocus($hGUI, "", $aInputControls[$i])
            ; G·ª≠i ph√≠m "Home" ƒë·ªÉ di chuy·ªÉn con tr·ªè v·ªÅ ƒë·∫ßu
            Send("{Home}")
        EndIf
    Next
    ; Sau khi ho√†n t·∫•t, b·∫°n c√≥ th·ªÉ t·∫≠p trung l·∫°i v√†o m·ªôt ƒëi·ªÅu khi·ªÉn kh√°c ho·∫∑c ƒë·ªÉ m·∫∑c ƒë·ªãnh
    ControlFocus($hGUI, "", $btn_export)

EndFunc

; ================================== H√†m: CheckWinLicense - Ki·ªÉm tra b·∫£n quy·ªÅn Windows ==================================
Func CheckWinLicense()
    Run(@ComSpec & " /k slmgr /xpr", "", @SW_SHOW)
EndFunc

; ================================== H√†m: CheckOemKey - L·∫•y v√† hi·ªÉn th·ªã OEM Key ==================================
Func CheckOemKey()
    Run(@ComSpec & " /k wmic path softwareLicensingService get OA3xOriginalProductKey" & @CRLF & "PAUSE", "", @SW_SHOW)
EndFunc

; ================================== H√†m: GetOfficeInfo - L·∫•y th√¥ng tin Office ==================================
Func GetOfficeInfo()
    Local $aOfficeDirs[2] = [ _
        @ProgramFilesDir & "\Microsoft Office", _
        @ProgramFilesDir & " (x86)\Microsoft Office" _
    ]

    Local $iHighestVersion = 0

    ; Duy·ªát c·∫£ hai th∆∞ m·ª•c Office
    For $i = 0 To 1
        If FileExists($aOfficeDirs[$i]) Then
            Local $aFiles = _FileListToArray($aOfficeDirs[$i], "Office*", $FLTA_FOLDERS)
            If IsArray($aFiles) Then
                For $j = 1 To $aFiles[0] ; B·ªè ph·∫ßn t·ª≠ 0 v√¨ l√† s·ªë l∆∞·ª£ng
                    ; Ki·ªÉm tra t√™n d·∫°ng "Office16", "Office15", ...
                    If StringRegExp($aFiles[$j], "^Office(\d{2})$") Then
                        Local $iVersion = Number(StringMid($aFiles[$j], 7, 2))
                        If $iVersion > $iHighestVersion Then
                            $iHighestVersion = $iVersion
                        EndIf
                    EndIf
                Next
            EndIf
        EndIf
    Next

    ; Tr·∫£ v·ªÅ k·∫øt qu·∫£
    If $iHighestVersion > 0 Then
        Local $sOfficeVersionName = ""
        Switch $iHighestVersion
            Case 16
                $sOfficeVersionName = "16.0 - Office 2016/365/2019/2021/2024"
            Case 15
                $sOfficeVersionName = "15.0 - Office 2013"
            Case 14
                $sOfficeVersionName = "14.0 - Office 2010"
            Case 12
                $sOfficeVersionName = "12.0 - Office 2007"
            Case 11
                $sOfficeVersionName = "11.0 - Office 2003"
            Case Else
                $sOfficeVersionName = "Phi√™n b·∫£n kh√¥ng x√°c ƒë·ªãnh"
        EndSwitch

        ; L·∫•y bitness th·ª±c t·∫ø
        Local $sOfficeBit = _GetOfficeBitness()

        Return "Microsoft Office (" & $sOfficeVersionName & " - " & $sOfficeBit & ")"
    EndIf

    Return "Ch∆∞a l·∫•y ƒë∆∞·ª£c th√¥ng tin"
EndFunc

; ======================
; _GetOfficeBitness()
; - ∆Øu ti√™n d√≤ trong Common Files\Microsoft Shared (OfficeXX)
; - N·∫øu kh√¥ng th·∫•y -> ki·ªÉm tra th∆∞ m·ª•c c√†i ƒë·∫∑t ch√≠nh
; - Tr·∫£: "32-bit", "64-bit", "C·∫£ hai (32-bit & 64-bit)" ho·∫∑c "Kh√¥ng x√°c ƒë·ªãnh"
; ======================
Func _GetOfficeBitness()
    ; L·∫•y ƒë∆∞·ªùng d·∫´n Program Files ch√≠nh x√°c
    Local $sPF64 = EnvGet("ProgramW6432")         ; tr√™n Win64: C:\Program Files
    Local $sPF32 = EnvGet("ProgramFiles(x86)")    ; tr√™n Win64: C:\Program Files (x86)
    If $sPF64 = "" Then $sPF64 = @ProgramFilesDir ; fallback
    ; N·∫øu h·ªá 32-bit th√¨ EnvGet("ProgramFiles(x86)") c√≥ th·ªÉ r·ªóng -> x·ª≠ l√Ω
    If $sPF32 = "" And @OSArch = "X86" Then $sPF32 = ""

    ; Common Files paths
    Local $sCommon64 = $sPF64 & "\Common Files\Microsoft Shared"
    Local $sCommon32 = ($sPF32 <> "") ? $sPF32 & "\Common Files\Microsoft Shared" : ""

    ; T√¨m version cao nh·∫•t trong m·ªói path
    Local $iHighest64 = _FindHighestOfficeInPath($sCommon64)
    Local $iHighest32 = _FindHighestOfficeInPath($sCommon32)

    ; N·∫øu t√¨m th·∫•y ·ªü Common Files -> quy·∫øt ƒë·ªãnh d·ª±a v√†o version t√¨m ƒë∆∞·ª£c
    If $iHighest64 > 0 Or $iHighest32 > 0 Then
        If $iHighest64 > $iHighest32 Then Return "64-bit"
        If $iHighest32 > $iHighest64 Then Return "32-bit"
        ; c√πng version cao nh·∫•t ·ªü c·∫£ hai nh√°nh
        If $iHighest64 > 0 Then Return "C·∫£ hai (32-bit & 64-bit)"
    EndIf

    ; Fallback: ki·ªÉm tra th∆∞ m·ª•c c√†i ƒë·∫∑t ch√≠nh
    Local $sMain64 = $sPF64 & "\Microsoft Office"
    Local $sMain32 = ($sPF32 <> "") ? $sPF32 & "\Microsoft Office" : ""
    Local $bMain64 = FileExists($sMain64)
    Local $bMain32 = ($sMain32 <> "") ? FileExists($sMain32) : False

    If $bMain64 And Not $bMain32 Then Return "64-bit"
    If $bMain32 And Not $bMain64 Then Return "32-bit"
    If $bMain64 And $bMain32 Then Return "C·∫£ hai (32-bit & 64-bit)"

    Return "Kh√¥ng x√°c ƒë·ªãnh"
EndFunc

; ======================
; _FindHighestOfficeInPath($sPath)
; - Tr·∫£ v·ªÅ s·ªë nguy√™n version cao nh·∫•t t√¨m th·∫•y trong $sPath (v√≠ d·ª• 16 cho Office16)
; - N·∫øu kh√¥ng t√¨m th·∫•y tr·∫£ 0
; ======================
Func _FindHighestOfficeInPath($sPath)
    If $sPath = "" Then Return 0
    If Not FileExists($sPath) Then Return 0

    ; L·∫•y danh s√°ch th∆∞ m·ª•c con
    Local $aDirs = _FileListToArray($sPath, "*", $FLTA_FOLDERS)
    If Not IsArray($aDirs) Then Return 0

    Local $iHighest = 0
    For $i = 1 To $aDirs[0]
        Local $sName = $aDirs[$i]
        ; T√¨m v·ªã tr√≠ "Office" (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
        Local $posOffice = StringInStr(StringUpper($sName), "OFFICE")
        If $posOffice > 0 Then
            ; L·∫•y ph·∫ßn n·∫±m sau ch·ªØ "Office"
            Local $sAfter = StringTrimLeft($sName, $posOffice + 5) ; pos + len("Office") -1
            ; L·∫•y chu·ªói s·ªë li√™n ti·∫øp ƒë·∫ßu ti√™n trong ph·∫ßn c√≤n l·∫°i
            Local $sDigits = StringRegExpReplace($sAfter, "\D", "") ; lo·∫°i h·∫øt k√Ω t·ª± kh√¥ng s·ªë
            If StringLen($sDigits) > 0 Then
                ; N·∫øu c√≥ nhi·ªÅu ch·ªØ s·ªë (kh√¥ng th∆∞·ªùng), l·∫•y 2 ch·ªØ s·ªë ƒë·∫ßu ƒë·ªÉ bi·ªÉu di·ªÖn 11/12/14/15/16...
                Local $sTake = (StringLen($sDigits) >= 2) ? StringLeft($sDigits, 2) : $sDigits
                Local $iVer = Number($sTake)
                If $iVer > $iHighest Then $iHighest = $iVer
            EndIf
        EndIf
    Next

    Return $iHighest
EndFunc

; ======================
; H√†m x√°c ƒë·ªãnh bitness c·ªßa Office t·ª´ Registry
; ======================
;Func _GetOfficeBitness()
;    Local Const $HKEY_LOCAL_MACHINE = "HKEY_LOCAL_MACHINE"
;    Local $sKey64 = "SOFTWARE\Microsoft\Office"
;    Local $sKey32 = "SOFTWARE\WOW6432Node\Microsoft\Office"

;    If RegEnumKey($HKEY_LOCAL_MACHINE & "\" & $sKey32, 1) <> "" Then
;        Return "32-bit"
;    EndIf
;    If RegEnumKey($HKEY_LOCAL_MACHINE & "\" & $sKey64, 1) <> "" Then
;        Return "64-bit"
;    EndIf
;    Return "Kh√¥ng x√°c ƒë·ªãnh"
;EndFunc

; ================================== H√†m: CheckOfficeLicense - Ki·ªÉm tra b·∫£n quy·ªÅn Office ==================================
Func CheckOfficeLicense()
    Local $sOfficePath = ""
    Local $sOfficePath64 = @ProgramFilesDir & "\Microsoft Office"
    Local $sOfficePath32 = @ProgramFilesDir & "(x86)\Microsoft Office"

    Local $sSearchPath = ""
    Local $iVersion = 16
    For $iVersion = 16 To 12 Step -1
        If FileExists($sOfficePath64 & "\Office" & $iVersion & "\ospp.vbs") Then
            $sSearchPath = $sOfficePath64 & "\Office" & $iVersion & "\"
            ExitLoop
        ElseIf FileExists($sOfficePath32 & "\Office" & $iVersion & "\ospp.vbs") Then
            $sSearchPath = $sOfficePath32 & "\Office" & $iVersion & "\"
            ExitLoop
        EndIf
    Next

    If $sSearchPath <> "" Then
        Local $sCmd = 'cscript.exe //Nologo "' & $sSearchPath & 'ospp.vbs" /dstatus'
        ; S·ª≠ d·ª•ng Run thay v√¨ RunWait
        Run(@ComSpec & " /k " & $sCmd, "", @SW_SHOW)
    Else
        MsgBox($MB_ICONERROR, "L·ªói", "Kh√¥ng t√¨m th·∫•y file 'ospp.vbs'. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n c√†i ƒë·∫∑t Office.")
    EndIf
EndFunc

; ================================== H√†m: GetSecuritySoftwareInfo - L·∫•y th√¥ng tin ph·∫ßn m·ªÅm di·ªát virus ==================================
Func GetSecuritySoftwareInfo()
    Local $sSecurityInfo = ""

    ; --- Ph∆∞∆°ng ph√°p 1: S·ª≠ d·ª•ng WMI ---
    Local $oWMI = ""
    If @OSVersion = "WIN_7" Then
        $oWMI = ObjGet("winmgmts:\\.\root\SecurityCenter")
    Else
        $oWMI = ObjGet("winmgmts:\\.\root\SecurityCenter2")
    EndIf

    If IsObj($oWMI) Then
        Local $colItems = $oWMI.ExecQuery("SELECT * FROM AntiVirusProduct")
        If Not @error And IsObj($colItems) Then
            For $oItem In $colItems
                If StringLen($oItem.displayName) > 0 Then
                    If Not StringInStr($sSecurityInfo, $oItem.displayName, $STR_NOCASESENSEBASIC) Then
                        $sSecurityInfo &= $oItem.displayName & " "
                    EndIf
                EndIf
            Next
        EndIf
    EndIf

    ; N·∫øu c√≥ k·∫øt qu·∫£ t·ª´ WMI ‚Üí tr·∫£ v·ªÅ ngay
    If StringLen($sSecurityInfo) > 0 Then
        Return StringStripWS($sSecurityInfo, $STR_STRIPTRAILING)
    EndIf

   ; --- Ph∆∞∆°ng ph√°p 2: Ki·ªÉm tra th∆∞ m·ª•c c√†i ƒë·∫∑t Antivirus ---
	Local $aAntivirusPaths[] = [ _
		@ProgramFilesDir & "\Windows Defender", _
		@ProgramFilesDir & "\ESET", _
		@ProgramFilesDir & "\Kaspersky Lab", _
		@ProgramFilesDir & "\McAfee", _
		@ProgramFilesDir & "\Norton Security", _
		@ProgramFilesDir & "\AVG", _
		@ProgramFilesDir & "\Avast Software", _
		@ProgramFilesDir & "\Bitdefender", _
		@ProgramFilesDir & "\Trend Micro", _
		@ProgramFilesDir & "\Sophos" _
	]

	; Th√™m th∆∞ m·ª•c Program Files (x86) n·∫øu l√† Windows 64-bit
	If @OSArch = "X64" Then
		Local $iUBound = UBound($aAntivirusPaths)
		ReDim $aAntivirusPaths[$iUBound + 10]
		$aAntivirusPaths[$iUBound + 0] = @ProgramFilesDir & " (x86)\ESET"
		$aAntivirusPaths[$iUBound + 1] = @ProgramFilesDir & " (x86)\Kaspersky Lab"
		$aAntivirusPaths[$iUBound + 2] = @ProgramFilesDir & " (x86)\McAfee"
		$aAntivirusPaths[$iUBound + 3] = @ProgramFilesDir & " (x86)\Norton Security"
		$aAntivirusPaths[$iUBound + 4] = @ProgramFilesDir & " (x86)\AVG"
		$aAntivirusPaths[$iUBound + 5] = @ProgramFilesDir & " (x86)\Avast Software"
		$aAntivirusPaths[$iUBound + 6] = @ProgramFilesDir & " (x86)\Bitdefender"
		$aAntivirusPaths[$iUBound + 7] = @ProgramFilesDir & " (x86)\Trend Micro"
		$aAntivirusPaths[$iUBound + 8] = @ProgramFilesDir & " (x86)\Sophos"
		$aAntivirusPaths[$iUBound + 9] = @ProgramFilesDir & " (x86)\Windows Defender"
	EndIf

	; Duy·ªát danh s√°ch th∆∞ m·ª•c ƒë·ªÉ ki·ªÉm tra
	For $i = 0 To UBound($aAntivirusPaths) - 1
		If FileExists($aAntivirusPaths[$i]) Then
			Local $sProductName = StringTrimLeft($aAntivirusPaths[$i], StringInStr($aAntivirusPaths[$i], "\", 0, -1))
			If Not StringInStr($sSecurityInfo, $sProductName, $STR_NOCASESENSEBASIC) Then
				$sSecurityInfo &= $sProductName & " "
			EndIf
		EndIf
	Next

    If StringLen($sSecurityInfo) > 0 Then
        Return StringStripWS($sSecurityInfo, $STR_STRIPTRAILING)
    Else
        Return "Ch∆∞a l·∫•y ƒë∆∞·ª£c th√¥ng tin"
    EndIf
EndFunc

; ================================== V√≤ng l·∫∑p ch√≠nh v√† c√°c h√†m x·ª≠ l√Ω s·ª± ki·ªán ==================================
CreateGUI()
Sleep(1000)
GetAndDisplayInfo()

While 1
    Sleep(100)
WEnd

; === H√†m: HandleExport - X·ª≠ l√Ω khi nh·∫•n n√∫t "Xu·∫•t k·∫øt qu·∫£" ===
Func HandleExport()
    ; Local $sFilePath = @ScriptDir & "\SystemInfo.txt"
	Local $sFilePath = @ScriptDir & "\" & GUICtrlRead($txt_pcName) & "-TTinPC.txt"
	; Ch·∫ø ƒë·ªô ghi ƒë√® file:
    ; 1 = M·ªü file ·ªü ch·∫ø ƒë·ªô ghi, n·∫øu file ƒë√£ t·ªìn t·∫°i th√¨ n·ªôi dung c≈© s·∫Ω b·ªã x√≥a v√† ghi l·∫°i t·ª´ ƒë·∫ßu.
    Local $hFile = FileOpen($sFilePath, 1)
    If $hFile = -1 Then
        MsgBox($MB_ICONERROR, "L·ªói", "Kh√¥ng th·ªÉ t·∫°o file: " & $sFilePath)
        Return
    EndIf

    FileWriteLine($hFile, "üìå Th√¥ng tin h·ªá th·ªëng - Ph√°t tri·ªÉn b·ªüi: L√™ Qu·ªëc Vi·ªát")
    FileWriteLine($hFile,"ToolLayThongTinMayTinh_v2.0")
    FileWriteLine($hFile, "=========================================================")
    FileWriteLine($hFile, "T√™n m√°y: " & GUICtrlRead($txt_pcName))
    FileWriteLine($hFile, "H√£ng s·∫£n xu·∫•t: " & GUICtrlRead($txt_manu))
    FileWriteLine($hFile, "Model: " & GUICtrlRead($txt_model))
    FileWriteLine($hFile, "Mainboard: " & GUICtrlRead($txt_mainboard))
    FileWriteLine($hFile, "NƒÉm s·∫£n xu·∫•t: " & GUICtrlRead($txt_year))
    FileWriteLine($hFile, "H·ªá ƒëi·ªÅu h√†nh: " & GUICtrlRead($txt_os))
    FileWriteLine($hFile, "B·∫£n quy·ªÅn Win: " & "Nh·∫•n n√∫t 'Ki·ªÉm tra' tr√™n giao di·ªán ƒë·ªÉ xem")
    FileWriteLine($hFile, "Office: " & GUICtrlRead($txt_office))
    FileWriteLine($hFile, "BQ Office: " & "Nh·∫•n n√∫t 'Ki·ªÉm tra' tr√™n giao di·ªán ƒë·ªÉ xem")
    FileWriteLine($hFile, "Security: " & GUICtrlRead($txt_security))
    FileWriteLine($hFile, "CPU: " & GUICtrlRead($txt_cpu))
    FileWriteLine($hFile, "Card ƒë·ªì ho·∫°: " & GUICtrlRead($txt_gpu))
    FileWriteLine($hFile, "RAM (Khe 1): " & GUICtrlRead($txt_ram1))
    FileWriteLine($hFile, "RAM (Khe 2): " & GUICtrlRead($txt_ram2))
    FileWriteLine($hFile, "T·ªïng RAM: " & GUICtrlRead($txt_total_ram))
    FileWriteLine($hFile, "·ªî ƒëƒ©a 1: " & GUICtrlRead($txt_disk1))
    FileWriteLine($hFile, "·ªî ƒëƒ©a 2: " & GUICtrlRead($txt_disk2))
	FileWriteLine($hFile, "T·ªïng ·ªï ƒëƒ©a: " & GUICtrlRead($txt_total_disk))

    FileClose($hFile)
    MsgBox($MB_ICONINFORMATION, "Th√†nh c√¥ng", "ƒê√£ xu·∫•t th√¥ng tin ra file: " & $sFilePath)
EndFunc

; === H√†m: HandleExit - X·ª≠ l√Ω khi nh·∫•n n√∫t "Tho√°t" ho·∫∑c ƒë√≥ng c·ª≠a s·ªï ===
Func HandleExit()
    Exit
EndFunc